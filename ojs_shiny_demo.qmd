---
title: "Observable Shiny Quarto"
format: 
  html:
    page-layout: custom
    code-tools:
      source: ojs_shiny_demo.qmd
server:
  type: shiny
---

## Observable + Shiny + Quarto Demo

::: panel-sidebar
```{ojs}
vars = cols
viewof xcol = Inputs.select(vars, {label: "X Variable", value: vars[0]})
viewof ycol = Inputs.select(vars, {label: "Y Variable", value: vars[1]})
viewof island = Inputs.checkbox(islands, {label: "Island", value: islands})
viewof bill_length_min = Inputs.range(
  [32, 50], 
  {value: 35, step: 1, label: "Bill length (min):"}
)
```
:::

::: {.panel-fill layout="[ [1,1] ]"}
```{ojs}
Plot.rectY(transpose(selectedData), Plot.binX({y: "count"}, {x: xcol, fill: "species"})).plot()
```

```{ojs}
Plot.rect(transpose(selectedData), Plot.bin({fillOpacity: "count"}, {x: xcol, y: ycol, fill: "species"})).plot()
```
:::

```{r}
#| context: server-start
library(readr)
library(ggplot2)
library(dplyr)
library(palmerpenguins)
library(tidyr)
library(nycflights13)
data(penguins)
data(flights)

penguins <- penguins |>
  tidyr::drop_na(bill_depth_mm)
```

```{r}
#| context: server
cols <- reactive({penguins |> select(where(is.numeric)) |> colnames()})
islands <- reactive({
  penguins |> pull(island) |> as.character() |> unique()
  })

selectedData <- reactive({
  req(input$xcol)
  req(input$ycol)
  req(input$island)
  
  col_sel <- c(input$xcol, input$ycol)
  
  penguins |>
    filter(bill_length_mm > input$bill_length_min) |>
    filter(island %in% input$island)
})

ojs_define(selectedData, cols, islands)
```
